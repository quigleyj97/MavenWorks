// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Query tests 
set @SliderValues = <<csv
value,label
0.42,AUD
0.03,CAD
0.04,CHF
0.11,DKK
0.11,EUR
0.1,GBP
0.01,HKD
0,ILS
0.43,JPY
0.23,NOK
0,NZD
0.21,SEK
0.38,SGD
0.12,USD
csv

set @ConfidenceLevelPct = 0.42
set @StartDate = 19980119
set @EndDate = 20090714

set @Data = Cache( 'Data1', Subselect( <<mql
    set @Pnl5MipWeeklyPath = WorkerCache(
        'pnl5_weekly',
        Fetch('https://dl.dropboxusercontent.com/s/ktez6tnglllde8z/PNL_Export_MIP_16Y_weekly.csv')
    )
    set @Pnl5MipExpPath = WorkerCache(
        'pnl5_exposures',
        Fetch('https://dl.dropboxusercontent.com/s/fj9xltj4f5azde6/PNL_Export_MIP_Exposures.csv')
    )
    set @rawTable = ExcelCsvToTable( @Pnl5MipWeeklyPath )
    set @tableWithFakeDates = Cache(
        'TWFD',
        AddComputedColumn( @rawTable, 'Fake Date', AddTime(Date(2012,06,14),  0, 0, -(858-[Scenario Index])*7 ))
    )
    SELECT
        Currency,
        [Book Value] as BookValue,
        VectorsToSparkline(
            DateTimeVectorFromTable( 'Fake Date', @tableWithFakeDates ),
            FloatVectorFromTable( Currency, @rawTable )
        ) as Scenarios
    FROM
        ExcelCsvToTable( @Pnl5MipExpPath )
mql
) )
set @FilteredData1 = Cache( Rand(  ), Subselect( <<mql
    set @NumDate = GetYears( Date ) * 10000 + GetMonths( Date ) * 100 + GetDays( Date )
    SELECT First(Currency) as Currency,
        First(BookValue) as BookValue,
        Sparkline(Scenarios, Date) as Scenarios
    FROM Explode(@Data)
    WHERE @NumDate >= @StartDate and @NumDate <= @EndDate
    GROUP BY Currency
    HAVING GetLevel() = 1
mql
, 'Data', @Data, 'StartDate', @StartDate, 'EndDate', @EndDate ) )
set @FilteredData2 = Cache( Rand(  ), Subselect( <<mql
    SELECT Currency as Currency2,
            Scenarios as Scenarios2
    FROM @FilteredData1
mql
, 'FilteredData1', @FilteredData1 ) )

set @MinThreshold = 65
set @ExposureSelectionType = 'Use Sliders'
set @MinThresholdScaled = 0.65
set @ShowGrid = False
set @ShowSliders = True
set @RowPath = '/root/AUD'
set @RowName = 'AUD'
set @CellContents = 'AUD'
set @MessageType = 'SelectedCellChanged'
set @WeightedSchenarioTotal = SparklineSum( SparklineMultiply( @ValueUsed / BookValue, Scenarios ) )
set @PNLVector = Cache(
    IfElse( @IsTotal, 'Grand Total', First( Currency ) ),
    SparklineToFloatVector( SparklineSum( @WeightedSchenarioTotal ) )
)
set @ConfidenceLevel = @ConfidenceLevelPct
set @tailLength = Ceiling( Length( @PNLVector ) * ( 1 - @ConfidenceLevel ) )
set @SliderAdjustedValue = Weight / RootVal( Sum( Weight ) ) * RootVal( Sum( BookValue ) )
set @ValueUsed = @SliderAdjustedValue
set @IsTotal = GetLevel(  ) = 0
set @WeightTable = RemoveColumns(
    AddComputedColumn( CsvToTable( @SliderValues ), 'Currency', label, 'Weight', value ),
    'RowName'
)
def @tailScenFilter(@value) = @value = Idx( SortVector( @PNLVector ), @tailLength )
set @tailScenarioIndex = Cache( 'tsi', RootVal( FirstIndexWhere( @PNLVector, @tailScenFilter, 0 ) ) )

SELECT
    Sum( @ValueUsed ) as [Book Value Used],
    IfElse( @IsTotal, null, Sum( @ValueUsed ) / RootVal( Sum( @ValueUsed ) ) ) as [%],
    Length(@WeightedSchenarioTotal) as PseudoScenarios,
    - Idx( SortVector( @PNLVector ), @tailLength ) as VaR,
    Idx( @PNLVector, @tailScenarioIndex ) / RootVal( Idx( @PNLVector, @tailScenarioIndex ) ) as [VaR Contribution],
    - VectorSum( Slice( SortVector( @PNLVector ), 0, @tailLength ) ) / @tailLength as ETL,
    - ( VectorSum( Slice( SortVector( @PNLVector ), 0, @tailLength ) ) / @tailLength ) / Sum( @ValueUsed ) as [ ETL %]
FROM
    FullOuterNaturalJoin( 'Currency', @FilteredData1, @WeightTable )
GROUP BY
    Currency
    WITH ROLLUP NO LEAVES
ORDER BY
    GetName(  ): 
set @SliderValues = <<csv
value,label
0.42,AUD
0.03,CAD
0.04,CHF
0.11,DKK
0.11,EUR
0.1,GBP
0.01,HKD
0,ILS
0.43,JPY
0.23,NOK
0,NZD
0.21,SEK
0.38,SGD
0.12,USD
csv

set @ConfidenceLevelPct = 0.42
set @StartDate = 19980119
set @EndDate = 20090714

set @Data = Cache( 'Data1', Subselect( <<mql
    set @Pnl5MipWeeklyPath = WorkerCache(
        'pnl5_weekly',
        Fetch('https://dl.dropboxusercontent.com/s/ktez6tnglllde8z/PNL_Export_MIP_16Y_weekly.csv')
    )
    set @Pnl5MipExpPath = WorkerCache(
        'pnl5_exposures',
        Fetch('https://dl.dropboxusercontent.com/s/fj9xltj4f5azde6/PNL_Export_MIP_Exposures.csv')
    )
    set @rawTable = ExcelCsvToTable( @Pnl5MipWeeklyPath )
    set @tableWithFakeDates = Cache(
        'TWFD',
        AddComputedColumn( @rawTable, 'Fake Date', AddTime(Date(2012,06,14),  0, 0, -(858-[Scenario Index])*7 ))
    )
    SELECT
        Currency,
        [Book Value] as BookValue,
        VectorsToSparkline(
            DateTimeVectorFromTable( 'Fake Date', @tableWithFakeDates ),
            FloatVectorFromTable( Currency, @rawTable )
        ) as Scenarios
    FROM
        ExcelCsvToTable( @Pnl5MipExpPath )
mql
) )
set @FilteredData1 = Cache( Rand(  ), Subselect( <<mql
    set @NumDate = GetYears( Date ) * 10000 + GetMonths( Date ) * 100 + GetDays( Date )
    SELECT First(Currency) as Currency,
        First(BookValue) as BookValue,
        Sparkline(Scenarios, Date) as Scenarios
    FROM Explode(@Data)
    WHERE @NumDate >= @StartDate and @NumDate <= @EndDate
    GROUP BY Currency
    HAVING GetLevel() = 1
mql
, 'Data', @Data, 'StartDate', @StartDate, 'EndDate', @EndDate ) )
set @FilteredData2 = Cache( Rand(  ), Subselect( <<mql
    SELECT Currency as Currency2,
            Scenarios as Scenarios2
    FROM @FilteredData1
mql
, 'FilteredData1', @FilteredData1 ) )

set @MinThreshold = 65
set @ExposureSelectionType = 'Use Sliders'
set @MinThresholdScaled = 0.65
set @ShowGrid = False
set @ShowSliders = True
set @RowPath = '/root/AUD'
set @RowName = 'AUD'
set @CellContents = 'AUD'
set @MessageType = 'SelectedCellChanged'
set @WeightedSchenarioTotal = SparklineSum( SparklineMultiply( @ValueUsed / BookValue, Scenarios ) )
set @PNLVector = Cache(
    IfElse( @IsTotal, 'Grand Total', First( Currency ) ),
    SparklineToFloatVector( SparklineSum( @WeightedSchenarioTotal ) )
)
set @ConfidenceLevel = @ConfidenceLevelPct
set @tailLength = Ceiling( Length( @PNLVector ) * ( 1 - @ConfidenceLevel ) )
set @SliderAdjustedValue = Weight / RootVal( Sum( Weight ) ) * RootVal( Sum( BookValue ) )
set @ValueUsed = @SliderAdjustedValue
set @IsTotal = GetLevel(  ) = 0
set @WeightTable = RemoveColumns(
    AddComputedColumn( CsvToTable( @SliderValues ), 'Currency', label, 'Weight', value ),
    'RowName'
)
def @tailScenFilter(@value) = @value = Idx( SortVector( @PNLVector ), @tailLength )
set @tailScenarioIndex = Cache( 'tsi', RootVal( FirstIndexWhere( @PNLVector, @tailScenFilter, 0 ) ) )

SELECT
    Sum( @ValueUsed ) as [Book Value Used],
    IfElse( @IsTotal, null, Sum( @ValueUsed ) / RootVal( Sum( @ValueUsed ) ) ) as [%],
    Length(@WeightedSchenarioTotal) as PseudoScenarios,
    - Idx( SortVector( @PNLVector ), @tailLength ) as VaR,
    Idx( @PNLVector, @tailScenarioIndex ) / RootVal( Idx( @PNLVector, @tailScenarioIndex ) ) as [VaR Contribution],
    - VectorSum( Slice( SortVector( @PNLVector ), 0, @tailLength ) ) / @tailLength as ETL,
    - ( VectorSum( Slice( SortVector( @PNLVector ), 0, @tailLength ) ) / @tailLength ) / Sum( @ValueUsed ) as [ ETL %]
FROM
    FullOuterNaturalJoin( 'Currency', @FilteredData1, @WeightTable )
GROUP BY
    Currency
    WITH ROLLUP NO LEAVES
ORDER BY
    GetName(  ) 1`] = `
"Path,Book Value Used,%,PseudoScenarios,VaR,VaR Contribution,ETL,\\" ETL %\\"
/root/AUD,167650525.67,0.19,600.00,-1374486.92,0.00,2299908.53,0.01
/root/CAD,11975037.55,0.01,600.00,-139876.52,0.06,200478.81,0.02
/root/CHF,15966716.73,0.02,600.00,-105431.17,-0.02,235680.20,0.01
/root/DKK,43908471.01,0.05,600.00,-343687.26,-0.17,731499.07,0.02
/root/EUR,43908471.01,0.05,600.00,-341826.18,-0.04,677675.15,0.02
/root/GBP,39916791.83,0.05,600.00,-234811.97,-0.04,544586.68,0.01
/root/HKD,3991679.18,0.00,600.00,-24418.04,0.04,69997.47,0.02
/root/ILS,0.00,0.00,600.00,0.00,0.00,0.00,NaN
/root/JPY,171642204.85,0.20,600.00,-1024931.24,0.61,2984816.52,0.02
/root/NOK,91808621.20,0.11,600.00,-1053105.79,0.07,1985562.38,0.02
/root/NZD,0.00,0.00,600.00,0.00,0.00,0.00,NaN
/root/SEK,83825262.84,0.10,600.00,-800474.53,0.14,1683899.97,0.02
/root/SGD,151683808.94,0.17,600.00,-921875.17,0.27,2814655.75,0.02
/root/USD,47900150.19,0.05,600.00,-305712.31,0.07,640729.06,0.01
/root,874177741.00,,600.00,-5905184.46,1.00,10402404.95,0.01"
`;

exports[`Query tests SELECT
    GetLevel( ),
    GetName( ),
    GetPath( )
FROM
    Lattice( 'x = 1 to 2 step 1, y = 1 to 2 step 1' )
GROUP BY
    1,
    x,
    y
  WITH ROLLUP: SELECT
    GetLevel( ),
    GetName( ),
    GetPath( )
FROM
    Lattice( 'x = 1 to 2 step 1, y = 1 to 2 step 1' )
GROUP BY
    1,
    x,
    y
  WITH ROLLUP 1`] = `
"Path,GetLevel(),GetName(),GetPath()
/root/1/1/1/null,4.00,null,/root/1/1/1/null
/root/1/1/1,3.00,1,/root/1/1/1
/root/1/1/2/null,4.00,null,/root/1/1/2/null
/root/1/1/2,3.00,2,/root/1/1/2
/root/1/1,2.00,1,/root/1/1
/root/1/2/1/null,4.00,null,/root/1/2/1/null
/root/1/2/1,3.00,1,/root/1/2/1
/root/1/2/2/null,4.00,null,/root/1/2/2/null
/root/1/2/2,3.00,2,/root/1/2/2
/root/1/2,2.00,2,/root/1/2
/root/1,1.00,1,/root/1
/root,0.00,root,/root"
`;

exports[`Query tests SELECT * FROM Lattice('x = 1 to 3 step 1'): SELECT * FROM Lattice('x = 1 to 3 step 1') 1`] = `
"Path,x
/null,1.00
/null,2.00
/null,3.00"
`;

exports[`Query tests SELECT GetName(), GetPath() FROM dual GROUP BY 1, 2, 3, 'foo' WITH ROLLUP: SELECT GetName(), GetPath() FROM dual GROUP BY 1, 2, 3, 'foo' WITH ROLLUP 1`] = `
"Path,GetName(),GetPath()
/root/1/2/3/foo/null,null,/root/1/2/3/foo/null
/root/1/2/3/foo,foo,/root/1/2/3/foo
/root/1/2/3,3,/root/1/2/3
/root/1/2,2,/root/1/2
/root/1,1,/root/1
/root,root,/root"
`;

exports[`Query tests SELECT JsEval('Math.sin(x)', 'x', x) FROM Lattice('x = 1 to 3 step 1'): SELECT JsEval('Math.sin(x)', 'x', x) FROM Lattice('x = 1 to 3 step 1') 1`] = `
"Path,\\"JsEval('Math.sin(x)','x',x)\\"
/null,
/null,
/null,"
`;

exports[`Query tests SELECT Sum(x + 1) FROM Lattice('x = 1 to 5 step 1, y = 1 to 3 step 1') GROUP BY x WITH ROLLUP: SELECT Sum(x + 1) FROM Lattice('x = 1 to 5 step 1, y = 1 to 3 step 1') GROUP BY x WITH ROLLUP 1`] = `
"Path,Sum(x+1)
/root/1/null,2.00
/root/1/null,2.00
/root/1/null,2.00
/root/1,6.00
/root/2/null,3.00
/root/2/null,3.00
/root/2/null,3.00
/root/2,9.00
/root/3/null,4.00
/root/3/null,4.00
/root/3/null,4.00
/root/3,12.00
/root/4/null,5.00
/root/4/null,5.00
/root/4/null,5.00
/root/4,15.00
/root/5/null,6.00
/root/5/null,6.00
/root/5/null,6.00
/root/5,18.00
/root,60.00"
`;

exports[`Query tests SELECT Sum(x) FROM Lattice('x = 1 to 5 step 1') GROUP BY x WITH ROLLUP: SELECT Sum(x) FROM Lattice('x = 1 to 5 step 1') GROUP BY x WITH ROLLUP 1`] = `
"Path,Sum(x)
/root/1/null,1.00
/root/1,1.00
/root/2/null,2.00
/root/2,2.00
/root/3/null,3.00
/root/3,3.00
/root/4/null,4.00
/root/4,4.00
/root/5/null,5.00
/root/5,5.00
/root,15.00"
`;

exports[`Query tests SELECT x -2 FROM Lattice('x = 1 to 3 step 1'): SELECT x -2 FROM Lattice('x = 1 to 3 step 1') 1`] = `
"Path,x-2
/null,-1.00
/null,0.00
/null,1.00"
`;

exports[`Query tests SELECT x -2 FROM Lattice('x = 1 to 3 step 1'): SELECT x -2 FROM Lattice('x = 1 to 3 step 1') 2`] = `
"Path,x-2
/null,-1.00
/null,0.00
/null,1.00"
`;

exports[`Query tests SELECT x FROM Lattice('x = 1 to 5 step 1') GROUP BY x: SELECT x FROM Lattice('x = 1 to 5 step 1') GROUP BY x 1`] = `
"Path,x
/1,
/2,
/3,
/4,
/5,"
`;

exports[`Query tests SELECT x FROM Lattice('x = 1 to 5 step 1') GROUP BY x: SELECT x FROM Lattice('x = 1 to 5 step 1') GROUP BY x 2`] = `
"Path,x
/1,
/2,
/3,
/4,
/5,"
`;

exports[`Query tests SELECT x FROM Lattice('x = 1 to 10 step 1'): SELECT x FROM Lattice('x = 1 to 10 step 1') 1`] = `
"Path,x
/null,1.00
/null,2.00
/null,3.00
/null,4.00
/null,5.00
/null,6.00
/null,7.00
/null,8.00
/null,9.00
/null,10.00"
`;

exports[`Query tests set @table = Lattice( 'x = 1 to 3 step 1, y = 7 to 10 step 1' )
    SELECT
        x,
        y,
        sum( x + y ),
        ParentVal( sum( x + y ) ),
        RootVal( sum( x + y ) )
    FROM
        @table
    GROUP BY
        x
    WITH ROLLUP: set @table = Lattice( 'x = 1 to 3 step 1, y = 7 to 10 step 1' )
    SELECT
        x,
        y,
        sum( x + y ),
        ParentVal( sum( x + y ) ),
        RootVal( sum( x + y ) )
    FROM
        @table
    GROUP BY
        x
    WITH ROLLUP 1`] = `
"Path,x,y,sum(x+y),ParentVal(sum(x+y)),RootVal(sum(x+y))
/root/1/null,1.00,7.00,8.00,38.00,126.00
/root/1/null,1.00,8.00,9.00,38.00,126.00
/root/1/null,1.00,9.00,10.00,38.00,126.00
/root/1/null,1.00,10.00,11.00,38.00,126.00
/root/1,,,38.00,126.00,126.00
/root/2/null,2.00,7.00,9.00,42.00,126.00
/root/2/null,2.00,8.00,10.00,42.00,126.00
/root/2/null,2.00,9.00,11.00,42.00,126.00
/root/2/null,2.00,10.00,12.00,42.00,126.00
/root/2,,,42.00,126.00,126.00
/root/3/null,3.00,7.00,10.00,46.00,126.00
/root/3/null,3.00,8.00,11.00,46.00,126.00
/root/3/null,3.00,9.00,12.00,46.00,126.00
/root/3/null,3.00,10.00,13.00,46.00,126.00
/root/3,,,46.00,126.00,126.00
/root,,,126.00,,126.00"
`;

exports[`Query tests set @tbl = Subselect(<<MQL
    SELECT
        x,
        y,
        ifelse(x % 2 > 0, null, x + y) as s1,
        x + y as s2,
        ifelse(x % 2 > 0, JsEval('return NaN'), 2) as n1,
        2 as n2,
        ifelse(x % 2 > 0, Infinity, 1) as i1,
        1 as i2
    FROM
        Lattice('x = 1 to 10 step 1, y = 1 to 3 step 1')
MQL
)

SELECT
    sum(s1) as [s1.sum],
    avg(s1) as [s1.avg],
    s1 as [s1.ref],
    s2 as [s1.nodrop],
    sum(n1) as [n1.sum],
    avg(n1) as [n1.avg],
    n1 as [n1.ref],
    n2 as [n1.nodrop],
    sum(i1) as [i1.sum],
    avg(i1) as [i1.avg],
    i1 as [i1.ref],
    i2 as [i1.nodrop]
FROM
    @tbl
GROUP BY y WITH ROLLUP: set @tbl = Subselect(<<MQL
    SELECT
        x,
        y,
        ifelse(x % 2 > 0, null, x + y) as s1,
        x + y as s2,
        ifelse(x % 2 > 0, JsEval('return NaN'), 2) as n1,
        2 as n2,
        ifelse(x % 2 > 0, Infinity, 1) as i1,
        1 as i2
    FROM
        Lattice('x = 1 to 10 step 1, y = 1 to 3 step 1')
MQL
)

SELECT
    sum(s1) as [s1.sum],
    avg(s1) as [s1.avg],
    s1 as [s1.ref],
    s2 as [s1.nodrop],
    sum(n1) as [n1.sum],
    avg(n1) as [n1.avg],
    n1 as [n1.ref],
    n2 as [n1.nodrop],
    sum(i1) as [i1.sum],
    avg(i1) as [i1.avg],
    i1 as [i1.ref],
    i2 as [i1.nodrop]
FROM
    @tbl
GROUP BY y WITH ROLLUP 1`] = `
"Path,s1.sum,s1.avg,s1.ref,s1.nodrop,n1.sum,n1.avg,n1.ref,n1.nodrop,i1.sum,i1.avg,i1.ref,i1.nodrop
/root/1/null,0.00,NaN,,2.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/1/null,3.00,3.00,3.00,3.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/1/null,0.00,NaN,,4.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/1/null,5.00,5.00,5.00,5.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/1/null,0.00,NaN,,6.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/1/null,7.00,7.00,7.00,7.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/1/null,0.00,NaN,,8.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/1/null,9.00,9.00,9.00,9.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/1/null,0.00,NaN,,10.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/1/null,11.00,11.00,11.00,11.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/1,35.00,7.00,,,NaN,NaN,,,Infinity,Infinity,,
/root/2/null,0.00,NaN,,3.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/2/null,4.00,4.00,4.00,4.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/2/null,0.00,NaN,,5.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/2/null,6.00,6.00,6.00,6.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/2/null,0.00,NaN,,7.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/2/null,8.00,8.00,8.00,8.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/2/null,0.00,NaN,,9.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/2/null,10.00,10.00,10.00,10.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/2/null,0.00,NaN,,11.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/2/null,12.00,12.00,12.00,12.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/2,40.00,8.00,,,NaN,NaN,,,Infinity,Infinity,,
/root/3/null,0.00,NaN,,4.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/3/null,5.00,5.00,5.00,5.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/3/null,0.00,NaN,,6.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/3/null,7.00,7.00,7.00,7.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/3/null,0.00,NaN,,8.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/3/null,9.00,9.00,9.00,9.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/3/null,0.00,NaN,,10.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/3/null,11.00,11.00,11.00,11.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/3/null,0.00,NaN,,12.00,NaN,NaN,NaN,2.00,Infinity,Infinity,Infinity,1.00
/root/3/null,13.00,13.00,13.00,13.00,2.00,2.00,2.00,2.00,1.00,1.00,1.00,1.00
/root/3,45.00,9.00,,,NaN,NaN,,,Infinity,Infinity,,
/root,120.00,8.00,,,NaN,NaN,,,Infinity,Infinity,,"
`;
